#BlueJ class context
comment0.target=QueuesATaleOfTwoStacks
comment0.text=\n\ A\ queue\ is\ an\ abstract\ data\ type\ that\ maintains\ the\ order\ in\ which\ elements\ were\ \n\ added\ to\ it,\ allowing\ the\ oldest\ elements\ to\ be\ removed\ from\ the\ front\ and\ new\ \n\ elements\ to\ be\ added\ to\ the\ rear.\ This\ is\ called\ a\ First-In-First-Out\ (FIFO)\ data\ \n\ structure\ because\ the\ first\ element\ added\ to\ the\ queue\ (i.e.,\ the\ one\ that\ has\ been\ \n\ waiting\ the\ longest)\ is\ always\ the\ first\ one\ to\ be\ removed.\n\n\ A\ basic\ queue\ has\ the\ following\ operations\:\n\n\ \ \ \ Enqueue\:\ add\ a\ new\ element\ to\ the\ end\ of\ the\ queue.\n\ \ \ \ Dequeue\:\ remove\ the\ element\ from\ the\ front\ of\ the\ queue\ and\ return\ it.\n\n\ In\ this\ challenge,\ you\ must\ first\ implement\ a\ queue\ using\ two\ stacks.\ Then\ process\ queries,\ \n\ where\ each\ query\ is\ one\ of\ the\ following\ types\:\n\n\ \ \ 1\ x\:\ Enqueue\ element\ into\ the\ end\ of\ the\ queue.\n\ \ \ 2\:\ Dequeue\ the\ element\ at\ the\ front\ of\ the\ queue.\n\ \ \ 3\:\ Print\ the\ element\ at\ the\ front\ of\ the\ queue.\n\n\ @author\ (Aguas,\ M)\n\ @version\ (16\ JULY\ 2017)\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
numComments=2
